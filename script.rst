D: Hi Brad
D: Hi David

D: What are you  working on.

B: Just trying to finish up our presentation for the Learning @ Scale Conference

D: Great, lets see what we've got

D: OK, looks like a bit of history of our two paper textbooks..
B: Yeah that seems like a long time ago, writing interactive textbooks is just so much more fun.  If only our other publisher were as forward thinking as Franklin Beedle, then both could be online.
D: As it is I'm happy we ran across the open source, How to think like a computer scientist to use as the basis for our CS 1 book.

B:  So should we show them a live demo?
D:  Lets be a bit more cautious, and stick to what we can show on your laptop.
B:  OK, I think whats really important is to show everyone that there are really two parts to this demo, the end product, that is, part 1:  our interactivepython website and the books we host there, and part 2: the runestone interactive tools that let us build all this stuff.

D: Right, so I think for the first part of the demo we should focus on demonstrating some of the different ways we are able to reach students who use different learning techniques.

B: I thought we would start with activecode, since that gets the most use, and it was kind of the aha moment with this whole project.  When we realized that we could embed a Python interpreter in the browser, and allow students to actually change the example code in the book I knew we were on to something special.  So, I've got my favorite fractal tree example here.

D: Ok, thats great but you kind of used the boring version.  Can't you add in  a bit of 

B: (while typing) yeah I'm on it.
D: So, this is just what we would hope a student is motivated to do, try the example code and then mess around with it a bit (ad-lib until Brad is done)  Thats much nicer.
B: And even though we are showing you Python here, the activecode could also be either Javascript or HTML, so you are not limited to only writing about Python.

D: So, experimentation is one way we want to reach our students, but another important aspect of CS1 is to try to help students create a mental model for how Python works.  We call this aspect of the book CodeLens.
B:  For this we turned to Philip Guo's excellent Python Tutor project.  Although for purposes of the textbook we don't allow students to edit this code.
(Brad begins stepping through the example)
D: CodeLens is a bit like a debugger, but better because it allows students to step forward an backward through the code and watch variables and data structures as they change. For helping students understand that python variables are simply references to objects in memory this is really a nice tool.  But I see that you don't have a function, so we can't demo a frame for a function call.
B: No problem, but for this, I'm going to have to edit the source and rebuild the demo.  (Brad begins editing)
D: In case you haven't put this together yet, we are actually building this demo using the same tools we use for writing a book.  We have a new, simplified repository on github that you can just checkout and go, if you want to use the tools to build something simple.
B: Yes, notice that the big complex diagram generated by codelens  only takes this much effort to write in the source. I can rebuild the demo with a single command ``paver build`` and if I wanted to publish this online for anyone to read I could deploy it with ``paver build`` and it would publish this for the world using Github Pages.  We are really hoping this will encourage more people to start creating their own content.  (back to the browser)

D: 








